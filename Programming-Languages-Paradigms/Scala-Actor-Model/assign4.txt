Assignment 4: Due 11:59PM Nov. 27

Reimplement Assign3 with total immutability and also without any explicit locks.

Once you complete answer the following questions:

1. In what way, structurally, the code is different from the solution in Assign 3?

In Assign3 and Assign4, the major challenge was to deal with concurrency where multiple threads share some common data. 
Since, there were mutable data structures used in Assign3 we had to use synchronization and explicit locks to avoid 
race conditions. But in Assign4, we used completely immutable data structures which eliminate the need of explicit 
synchronization and locks. Thus, they are thread-safe. 

We employed actor model to deal with concurrency in Assign4. Also, this solution has less ceremony as it is designed with functions 
as first-class citizens as compared to Assign3 where there were classes and the complex relationships on which those classes depend. 
In Assign4, the code is intuitive and concise. 

2. In what way, behavior wise, the code is different from the solution in Assign 3?

The solution in Assign 3 had issues with the accuracy rate in the concurrent part. The main problem in Assign3 is that using low-level
synchronization constructs like locks and threads are very hard to reason about. As a result, it was very hard to correctly understand 
the reasons for strange behaviour like the low accuracy in the concurrent outputs. But Scala's actor model helped in avoiding the need 
to understand how the synchronization might behave. 

In Assign3, though the race conditions were taken care of by the explicit synchronization, the concurrent solution sometimes didn't yield 
the results accurately. We could overcome this in the Assign4 by of using scala's actor model, in which the requests to the web api are 
handled by the actors(analogous to Threads). The actors communicate by asynchronous message passing, thus avoiding any kind of race condition 
or deadlocks. Since actors always process one message at a time, this ensures that all operations on the data are thread-safe. Scala actors work 
on a shared-nothing principle, so there are no locks (and hence no deadlocks)! Actors listen for messages and are invoked by the code that 
has something for an actor to work upon. Hence, the accuracy of results is high in the Assign4 solution.

The part of code where the scala actors communicate via message passing is below:

val caller = self
	isbnList.foreach{isbn => 
		actor{caller ! parseXMLDocument(getSignedRequests(isbn), isbn)}}
val concurrentOutput = isbnList.map{(isbn) =>
	receive { case data: MappedBook => { 
		new MappedBook (data.isbn, data.title, data.salesrank)
	}
			

3. What are some of your observations and things you learned from designing and implementing Assign 3 and Assign 4?

Assign4 has light weight design and less ceremonious code as compared to Assign3. In Assign3, while dealing with concurrency we had 
to explicitly ensure thread-safety on the data which was shared among threads. We used synchronization and proper locks to avoid race 
conditions. This lead to ceremonial code and heavy weight design. But in Assign4, the Scala's actor model implicitly ensured the 
thread-safety on the data that is shared among actors. Also, the actors model is based on a shared-nothing principle which ensures that any 
operation on data remains free from the anomalies caused by other actors. This is because the information is immutable. Hence, this solution 
has light weight design. Also, since the solution in Assign4 has functions as first class citizens, it reduces the unnecessary ceremony 
and makes code concise and elegant. 

Also, we understood that while thinking of a solution to a problem we need to clearly understand what a particular piece of code 
is intended to do. This often helps in reducing the complexity in code. For instance, we used foldLeft() to add partial maps to 
a collection which could be achieved using a simple map function. We could see how elegant and concise code be written for a solution 
which in Assign3 was ceremonious and involved lot of mutability, as compared to the solution in Assign4.

Scala is considered to have a better scalability compared to Java.  Scala provides higher-level libraries and concepts that make it 
easier for developers to understand their problems from the perspective of concurrency. Hence, the end result is better and more scalable 
than coding directly in Java. We would use Scala in a situation where the scalability of application is an issue. Since, Scala's concurrency
model can be easily understood by the developers. Also, since the low-level thread management is a pain in Java, we would prefer to use Scala's 
actor model which handles the concurrency more efficiently. Since, it is a language which promotes immutability by default, the developer can
concentrate on the functionality more than managing the low level constructs. 

